@use 'sass:map';
@use './define';
@use './palettes/color';

$_instances: ();

@function _getInstance($name) {
  @return map.get($_instances, $name);
}

@function get($name) {
  $inst: _getInstance($name);
  @if not $inst {
    @error ("Pallete '#{$name}' is not defined");
  }
  @return $inst;
}

@function _create($name, $colors) {
  $inst: (
    name: $name,
    colors: $colors,
  );
  $_instances: map.set($_instances, $name, $inst) !global;
  @return $inst;
}

@mixin define($name, $colors) {
  @if _getInstance($name) {
    @error ("Pallete '#{$name}' is already defined");
  }
  $inst: _create($name, $colors);
  $c: map.get($inst, colors);
  $contrasts: map.get($c, contrast);

  @at-root :root {
    /* #{$name} palette */
    #{define.propertyName('palette')}: #{define.propertyValue($name)};
    @each $key, $contrast in $contrasts {
      #{color.propertyName($name, $key)}: #{color.propertyValue(
          map.get($colors, $key)
        )};
      #{color.propertyName($name, '#{$key}-contrast')}: #{color.propertyValue(
          $contrast
        )};
    }
  }
}
